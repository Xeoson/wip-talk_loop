// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String  @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String                    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?                   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  accounts      Account[]
  sessions      Session[]
  conversations ConversationParticipant[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ConversationParticipant {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  userId         String       @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  viewed         Boolean      @default(false)
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model Conversation {
  id           String                    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  ownerId      String                    @db.ObjectId
  participants ConversationParticipant[]
  messages     Message[]
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  Conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @db.ObjectId
  text           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
